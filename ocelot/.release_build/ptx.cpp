
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 39
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer ptxFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *ptxalloc (yy_size_t  );
void *ptxrealloc (void *,yy_size_t  );
void ptxfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int parser::PTXLexer::yylex()

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 291
#define YY_END_OF_BUFFER 292
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[833] =
    {   0,
      271,  271,  292,  291,  271,  273,  272,  288,  291,  291,
      291,  281,  282,  284,  274,  287,  276,  291,  260,  257,
      275,  283,  286,  285,  291,  255,  255,  279,  280,  290,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  277,  289,  278,
      271,  273,  272,    0,  256,    0,    0,    0,    0,    0,
        0,  255,  257,  267,  267,  267,  267,    0,  190,  189,
        0,    0,    0,    0,  188,    0,    0,    0,    0,    0,
        0,  211,  187,    0,    0,    0,    0,  186,  183,  184,
      185,    0,  270,    0,  267,  260,    0,    0,    0,    0,

      264,    0,  257,  261,    0,    0,  253,    0,  255,  268,
        0,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,   33,  255,  255,
      255,  255,  255,  255,  255,  255,   47,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
       68,  255,  255,  255,  255,  255,  255,  255,    0,    0,
        0,    0,    3,    0,    0,  257,    0,  267,  204,  205,
      206,  220,  221,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  134,    0,    0,    0,  212,
      178,  214,    0,    0,    0,  215,    0,    0,  217,    0,

        0,    0,    0,  142,    0,    0,    0,    0,    0,    0,
        0,    0,  147,  113,  146,    0,  161,  149,    0,    0,
      145,  162,  148,  144,  216,    0,    0,    0,  218,  143,
        0,    0,  159,    0,    0,    0,    0,    0,    0,  164,
      163,  166,  165,    0,    0,    0,  128,    0,    0,    0,
        0,    0,    0,    0,  233,    0,    0,    0,    0,  131,
        0,  193,  181,  182,    0,    0,    0,  213,    0,    0,
      219,    0,    0,    0,    0,  270,  269,    0,  258,    0,
        0,  267,    0,  259,    0,  254,  253,  253,   13,    9,
       11,  255,   14,   16,   15,   18,  255,  255,  255,   22,

      255,  255,   25,   26,   28,   29,  255,   31,  255,   34,
       35,   38,  255,   41,  255,   37,   42,   43,   45,   46,
      255,  255,  255,  255,   53,   54,   55,   56,  255,   58,
      255,   60,  255,   63,   64,   65,  255,  255,  255,   69,
      255,   74,  255,  255,  255,   76,  255,  255,   79,  255,
       81,    0,    0,    0,    0,    0,    0,    0,    0,  267,
      207,  208,    0,  201,    0,  192,  158,  191,    0,    0,
      135,  136,  242,  137,    0,    0,    0,    0,  202,    0,
        0,    0,  112,    0,  199,    0,    0,  244,  245,    0,
      150,    0,    0,  138,  140,  241,  139,    0,    0,  172,

        0,    0,  155,    0,  154,    0,  196,  200,    0,  153,
       93,  152,  198,  197,  157,  151,    0,    0,  156,    0,
        0,    0,    0,  100,    0,  243,  237,  101,  168,  167,
      170,  169,  129,  127,  130,    0,  171,    0,    0,    0,
        0,    0,    0,  114,    0,    0,    0,    0,  132,  126,
      133,  175,    0,    0,    0,    0,    0,  160,    0,  270,
      269,  270,  262,    0,  267,    0,    0,    0,  263,  254,
      254,   10,   12,  255,   19,  255,   21,   23,  255,   27,
       30,  255,  255,   39,  255,  255,  255,  255,   51,  255,
       52,  255,   59,   61,   62,   66,  255,  255,  255,   67,

       70,   71,  255,   72,  255,  255,   77,   78,   80,    0,
        5,    0,    8,    0,    0,    7,    0,    0,    0,    0,
        0,    0,  195,  176,    0,    0,    0,    0,  209,    0,
      194,    0,  203,    0,   89,    0,    0,  180,   90,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  239,
        0,  141,  246,    0,    0,    0,    0,    0,    0,  238,
      174,    0,    0,  232,    0,    0,    0,  111,  177,    0,
      235,    0,    0,    0,  267,   17,   20,  255,  255,   40,
      255,  255,   44,  255,  255,   57,  115,  116,  117,  118,
      119,  120,  121,  122,   73,   75,  255,    0,    6,    4,

        0,  210,    0,    0,   82,    0,    0,    0,    0,    0,
        0,  234,   86,  224,   87,    0,    0,    0,    0,    0,
        0,   92,    0,    0,    0,    0,    0,    0,    0,   98,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  222,    0,    0,  267,  267,  255,  255,  255,
       36,  255,  255,  255,    2,    0,    0,    0,  173,  236,
      240,    0,    0,    0,   88,    0,  247,   91,  223,    0,
        0,    0,    0,    0,  251,    0,  249,   99,    0,    0,
      104,    0,    0,    0,  107,  108,    0,    0,    0,    0,
      267,  255,  255,  255,   48,  255,  255,    1,    0,    0,

        0,    0,    0,    0,    0,    0,   96,   97,    0,    0,
        0,    0,  103,    0,    0,  106,  109,  110,    0,    0,
       24,   32,  255,   49,  255,    0,    0,    0,    0,    0,
        0,  248,    0,    0,    0,    0,    0,  105,    0,  179,
        0,  255,   50,  255,  255,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  252,  265,  255,
      255,  255,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  250,  102,    0,  255,  255,  255,  227,  228,
      229,    0,    0,   85,    0,    0,  226,    0,    0,    0,
        0,  255,  255,  255,   83,    0,    0,    0,   94,   95,

        0,    0,  255,  255,  255,   84,    0,  231,    0,    0,
      123,  255,  255,    0,    0,    0,  255,  125,    0,    0,
        0,  255,    0,    0,    0,  255,  230,  225,  266,  255,
      124,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,    1,    1,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,    1,   34,   35,   36,   35,   37,   38,   39,
       40,   40,   41,   40,   40,   42,   40,   40,   40,   43,
       40,   40,   40,   41,   44,   40,   40,   45,   40,   40,
       46,   47,   48,    1,   49,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   40,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,   75,   76,   77,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[78] =
    {   0,
        1,    2,    3,    2,    2,    4,    1,    1,    5,    6,
        1,    1,    1,    7,    1,    7,    8,    1,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    2,    1,
        1,    1,    1,    1,   10,   10,   10,   11,   12,    5,
        5,   13,    5,   14,    5,    1,    1,    1,    5,   10,
       10,   10,   10,   11,   12,    5,    5,    5,    5,   13,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[870] =
    {   0,
        0,    0, 1721, 2298, 1715,   75, 1711, 2298,   73,   28,
        0, 2298, 2298, 2298, 2298,   69,  102,   85,  160,   93,
     2298, 2298, 2298, 2298,   96,  107,  111, 2298, 2298,    0,
      187,  198,  215,  204,  221,  237,  232,  241,  252,  278,
      267,  282,  299,  365,  318,  287,  325, 2298, 2298, 2298,
     1713,   81, 1709,   92, 2298, 1710, 1658,   57, 1653,   45,
     1652,  332,  376,  320,  389, 1655, 1650,  113,  386,  431,
      405,   87,  311,  444,  258,   84,  148,  416,   85,  426,
     1636,  289,  436,  474,  197,  489,  323,  464, 1628, 2298,
     1634, 1674, 1677, 1664, 1610,  537,  214,  446,    0,  132,

     2298, 1642,  370, 2298,  264,    0,    0,  387,  407, 2298,
      160,  501,  537,  544,  515,  565,  572,  578,  582,  591,
      598,  604,  610,  614,  619,  645,  650,  654,  665,  658,
      671,  686,  697,  702,  708,  714,  723,  731,  736,  740,
      745,  749,  754,  768,  775,  782,  787,  794,  801,  810,
      822,  827,  836,  853,  857,  862,  866,  870, 1601, 1576,
     1589, 1579, 1585, 1571, 1557,  891,  179, 2298, 2298, 2298,
     2298, 2298, 2298, 1561, 1556, 1528, 1531,  164,  206, 1519,
     1516, 1551, 1554, 1520, 1547, 2298, 1509, 1508, 1498,   41,
     2298, 2298, 1515, 1514, 1500, 2298, 1507, 1505, 2298,   97,

     1480,  152, 1482, 1477,  126, 1516, 1516, 1477, 1507,  168,
     1453,  228, 1454, 1455, 1444, 1454, 2298, 2298, 1435,  253,
     1430, 1443, 2298, 1424, 2298, 1416, 1420, 1419, 2298, 1409,
      251, 1416, 2298, 1409, 1406,  281, 1403,  322,  312, 1405,
     1403, 1388, 1376, 1408, 1410, 1399, 2298,  303, 1369,  171,
      258,  233,  327, 1345, 2298, 1363, 1387, 1390, 1386, 2298,
     1345, 2298, 2298, 2298, 1335, 1325, 1327, 2298, 1322, 1313,
     2298, 1295, 1292, 1341, 1326,    0,    0,  400,  569,    0,
      918,  908,    0,  491,    0,    0,    0,    0,  875,  896,
      924,  928,  947,  954,  962,  967,  973,  977,  982,  988,

      993,  999, 1003, 1008, 1016, 1021, 1025, 1031, 1042, 1047,
     1051, 1060, 1065, 1073, 1080, 1086, 1093, 1099, 1103, 1114,
     1119, 1125, 1131, 1135, 1140, 1145, 1151, 1161, 1166, 1171,
     1177, 1183, 1189, 1194, 1200, 1205, 1209, 1215, 1222, 1226,
     1238, 1252, 1256, 1260, 1264, 1268, 1278, 1282, 1290, 1294,
     1298, 1285, 1277, 1272, 1272, 1271, 1257, 1262, 1314, 1308,
     2298, 2298, 1264, 1248, 1257, 2298, 2298, 2298, 1246, 1251,
     2298, 2298, 2298, 2298, 1248, 1233, 1251, 1244, 2298, 1226,
     1218, 1209, 2298, 1221, 2298, 1206, 1209, 2298, 2298, 1197,
     2298, 1202, 1199, 2298, 2298, 2298, 2298,  367, 1194, 2298,

     1190, 1196, 2298, 1195, 2298, 1189, 2298, 2298, 1181, 2298,
     1183, 2298, 1163, 1160, 2298, 2298, 1160, 1166, 1164, 1158,
     1149, 1141, 1139, 2298, 1159, 2298, 2298, 2298, 2298, 2298,
     2298, 2298, 2298, 2298, 2298, 1119, 2298, 1110, 1106, 1112,
     1100, 1106, 1107, 2298, 1098, 1101, 1086, 1087, 2298, 2298,
     2298, 2298, 1079, 1083, 1088, 1075,  391, 2298, 1063, 2298,
        0,    0, 2298,    0, 2298,  428,  486,  324, 2298,    0,
        0, 1316, 1347, 1351, 1355, 1360, 1365, 1369, 1373, 1377,
     1381, 1386, 1391, 1395, 1403, 1414, 1421, 1425, 1433, 1437,
     1443, 1447, 1451, 1455, 1463, 1469, 1481, 1485, 1492, 1504,

     1515, 1520, 1524, 1530, 1534, 1538, 1543, 1550, 1556, 1063,
     2298, 1062, 2298, 1058, 1042, 2298, 1056,  356, 1038, 1036,
     1026, 1029, 2298, 2298,  292, 1025, 1022, 1015, 2298, 1022,
     2298, 1001, 2298, 1007, 2298, 1014,  998, 2298, 2298, 1013,
     1002,  995,  988,  425,  988,  989,  976,  980,  970, 2298,
      958, 2298, 2298,  956,  957,  960,  941,  937,  933, 2298,
     2298,  940,  934, 2298,  927,  929,  906, 2298, 2298,  916,
     2298,    0,  511, 1567, 1557, 1576, 1598, 1602, 1606, 1611,
     1616, 1620, 1624, 1628, 1632, 1642, 1646, 1650, 1660, 1664,
     1668, 1672, 1676, 1680, 1690, 1694, 1702,  916, 2298, 2298,

      912, 2298,  901,  894, 2298,  888,  901,  886,  865,  873,
      867, 2298, 2298, 2298, 2298,  858,  843,  851,  842,  829,
      838, 2298,  822,  835,  830,  817,  824,  814,  815, 2298,
      823,  815,  800,  807,  804,  787,  798,  779,  790,  781,
      776,  776, 2298,    0, 1713, 1704, 2298, 1720, 1724, 1740,
     1746, 1752, 1756, 1763, 2298,  779,  765,  758, 2298, 2298,
     2298,  759,  754,  758, 2298,  764, 2298, 2298, 2298,  740,
      757,  739,  740,  740,  730,  720, 2298, 2298,  710,  713,
     2298,  710,  707,  711, 2298, 2298,  701,  707,  697,    0,
     2298, 1768, 1775, 1782, 1786, 1794, 1798, 2298,  702,  697,

      671,  678,  680,  663,  667,  656, 2298, 2298,  650,  635,
      657,  639, 2298,  635,  648, 2298, 2298, 2298,  643,    0,
     1805, 1814, 1820, 1824, 1831,  642,  626,  629,  635,   51,
      622, 2298,  627,  618,  603,  591,  587, 2298,  578, 2298,
        0, 1836, 1840, 1850, 1854,  586,  571,  557,  554,  567,
      538,  546,  532,  526,  536,  522,  530, 2298,    0, 1862,
     1866, 1872,  517,  505,  499,  504,  484,  492,  486,  466,
      459,  458, 2298, 2298,    0, 1876, 1880, 1892, 2298, 2298,
     2298,  409,  396, 2298,  391,  386, 2298,  376,  371,  377,
        0, 1913, 1920, 1924, 2298,  363,  364,  316, 2298, 2298,

      316,    0, 1934, 1939, 1946, 2298,  257, 2298,  251,    0,
     1952, 1956, 1960,  203,  201,    0, 1967, 1972,  194,  182,
        0, 1986,  136,   20,    0, 1990, 2298, 2298, 2298, 2000,
     2004, 2298, 2068, 2078, 2085, 2096, 2109, 2115, 2128, 2142,
     2149, 2152,  627, 2157, 2165, 2175, 2185,  644, 2199, 2205,
     2209, 2217, 2227, 2233,  657, 2237,  673, 2241, 2245, 2249,
     2253, 2257, 2261, 2265, 2269, 2273, 2277, 2281, 2285
    } ;

static yyconst flex_int16_t yy_def[870] =
    {   0,
      832,    1,  832,  832,  832,  832,  832,  832,  833,  832,
      834,  832,  832,  832,  832,  832,  832,  832,  832,  835,
      832,  832,  832,  832,  836,  837,  837,  832,  832,  834,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  832,  832,  832,
      832,  832,  832,  833,  832,  833,  832,  832,  832,  832,
      832,  834,  832,  838,  838,   65,   65,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  839,  840,  832,   65,  832,  841,  832,  842,  843,

      832,  844,  835,  832,  845,  846,  847,  832,  837,  832,
      833,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  832,  832,
      832,  832,  832,  832,  832,  832,  848,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,

      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  839,  839,  840,  849,  832,  832,  850,
      832,  843,  851,  844,  852,  853,  846,  847,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,

      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  832,  832,  832,  832,  832,  832,  832,  832,  848,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,

      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      849,  840,  832,  854,  832,  851,  851,  855,  832,  852,
      853,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,

      837,  837,  837,  837,  837,  837,  837,  837,  837,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  856,  857,  832,  855,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  832,  832,  832,

      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  858,  832,  857,  832,  837,  837,  837,
      837,  837,  837,  837,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  859,
      832,  837,  837,  837,  837,  837,  837,  832,  832,  832,

      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  860,
      837,  837,  837,  837,  837,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      861,  837,  837,  837,  837,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  862,  837,
      837,  837,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  863,  837,  837,  837,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      864,  837,  837,  837,  832,  832,  832,  832,  832,  832,

      832,  865,  837,  837,  837,  832,  832,  832,  832,  866,
      837,  837,  837,  832,  832,  867,  837,  837,  832,  832,
      868,  837,  832,  832,  869,  837,  832,  832,  832,  837,
      837,    0,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832
    } ;

static yyconst flex_int16_t yy_nxt[2376] =
    {   0,
        4,    5,    6,    6,    7,    8,    9,   10,   11,   11,
       12,   13,    4,   14,   15,   16,   17,   18,   19,   20,
       20,   20,   20,   20,   20,   20,   20,   20,    4,   21,
       22,   23,   24,   25,   26,   26,   26,   26,   26,   26,
       26,   27,   26,   26,   26,   28,    4,   29,   30,   31,
       32,   33,   34,   35,   36,   26,   26,   37,   26,   38,
       39,   40,   41,   42,   26,   43,   44,   45,   26,   46,
       26,   47,   26,   26,   48,   49,   50,   52,   52,   55,
       57,   58,   59,   52,   52,   60,  828,   61,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   92,   55,  163,

      378,  105,   93,  750,  106,  106,  164,  379,  108,   95,
      108,  108,  108,  751,  108,  108,  160,  111,  161,   56,
       64,   65,   66,   67,   64,   64,   64,   64,   64,   64,
      100,   94,  172,  173,  226,  110,  104,  216,   56,  110,
      200,  217,  227,   68,  106,  281,  100,  281,  385,  201,
      218,   69,   70,   71,   72,   73,   74,   75,   76,   77,
      386,   78,   79,   80,   81,   82,   55,   83,   84,   85,
       86,   87,   88,   89,   90,   91,   95,  392,   96,   96,
       96,   96,   96,   96,   96,   96,   97,   97,  108,  827,
      108,  108,  359,  393,  359,   98,   99,  100,   99,  108,

      219,  108,  108,  101,  102,  108,   56,  108,  108,  220,
       98,  388,   99,  100,   99,  110,  108,  389,  108,  108,
      439,  365,  108,  366,  108,  108,  110,  398,  440,  399,
       95,  102,  110,  108,  824,  108,  108,  112,  108,  113,
      108,  108,  108,  110,  108,  108,  253,  116,  114,  110,
      254,  100,  117,  108,  115,  108,  108,  823,  367,  255,
      110,  124,  256,  118,  119,  110,  820,  100,  108,  110,
      108,  108,  285,  285,  120,  819,  121,  122,  368,  108,
      110,  108,  108,  108,  123,  108,  108,  401,  108,  402,
      108,  108,  125,  128,  443,  110,  129,  126,  127,  444,

      108,  130,  108,  108,  408,  131,  110,  409,  441,  132,
      110,  213,  285,  815,  133,  110,  417,  214,  418,  108,
      134,  108,  108,  442,  814,  215,  108,  110,  108,  108,
      422,  135,  137,  108,  423,  108,  108,  574,  234,  574,
      136,  425,  138,  263,  139,  264,  110,  140,  426,  157,
      141,  235,  142,  110,  236,  609,  237,  167,  168,  610,
      110,  168,  202,  436,  427,  143,  108,  428,  108,  108,
      437,  153,  203,  167,  168,  204,  265,  154,  809,  168,
      266,  808,  205,  155,  445,  267,   95,  158,  108,  156,
      108,  108,  446,  110,  166,  166,  166,  166,  166,  166,

      166,  166,  166,  166,  603,  174,  175,  100,  108,  604,
      108,  108,  807,  104,  144,  110,  806,  462,  145,  104,
      535,  146,  147,  100,  148,  149,  167,  168,  801,  150,
      168,  800,  151,  152,  536,  110,  799,  176,  177,  798,
      797,  169,  167,  168,  569,  178,   94,  179,  168,  180,
      182,  181,  183,  184,  190,  185,  191,  186,  570,  796,
      192,  193,  795,  206,  194,  207,  208,  195,  209,  221,
      573,  196,  197,  198,  199,  228,  623,  229,  222,  230,
      187,  279,  223,  224,  225,  188,  279,  238,  231,  239,
      624,  573,  625,  244,  232,  245,  240,  241,  246,  242,

      247,  210,  108,  189,  108,  108,  790,  467,  257,  243,
      258,  211,  212,  259,  268,  260,  108,  269,  108,  108,
      279,  270,  279,  248,  645,  789,  645,  249,  573,  110,
      250,  271,  788,  468,  469,  779,  780,  781,  108,  787,
      108,  108,  251,  110,  786,  108,  252,  108,  108,  573,
      261,  785,  262,   95,  468,   96,   96,   96,   96,   96,
       96,   96,   96,   97,   97,  110,  108,  289,  108,  108,
      784,  783,  110,  108,  100,  108,  108,  292,  782,  108,
      101,  108,  108,  108,  774,  108,  108,  773,  772,  290,
      100,  771,  108,  110,  108,  108,  291,  770,  769,  108,

      110,  108,  108,  768,  279,  108,  110,  108,  108,  279,
      110,  108,  463,  108,  108,  108,  767,  108,  108,  110,
      108,  766,  108,  108,  765,  294,  110,  296,  764,  295,
      293,  297,  110,  282,  763,  282,  298,  758,  110,  306,
      757,  299,  110,  279,  756,  279,  108,  110,  108,  108,
      360,  108,  360,  108,  108,  108,  755,  108,  108,  108,
      301,  108,  108,  575,  300,  575,  108,  302,  108,  108,
      303,  754,  108,  110,  108,  108,  307,  304,  110,  646,
      753,  646,  110,  305,  752,  311,  110,  108,  749,  108,
      108,  748,  747,  110,  308,  746,  740,  739,  108,  110,

      108,  108,  738,  108,  737,  108,  108,  736,  735,  108,
      312,  108,  108,  734,  110,  108,  309,  108,  108,  733,
      732,  313,  310,  731,  108,  110,  108,  108,  730,  314,
      110,  315,  108,  729,  108,  108,  110,  108,  728,  108,
      108,  108,  110,  108,  108,  727,  108,  316,  108,  108,
      108,  110,  108,  108,  726,  108,  719,  108,  108,  110,
      718,  318,  717,  319,  110,  716,  317,  715,  110,  108,
      714,  108,  108,  110,  713,  712,  108,  110,  108,  108,
      711,  320,  110,  108,  321,  108,  108,  710,  108,  709,
      108,  108,  708,  323,  707,  108,  110,  108,  108,  322,

      324,  326,  108,  110,  108,  108,  706,  705,  325,  327,
      110,  108,  704,  108,  108,  110,  328,  703,  329,  702,
      330,  701,  110,  108,  700,  108,  108,  699,  108,  110,
      108,  108,  698,  689,  331,  688,  333,  108,  110,  108,
      108,  334,  332,  687,  686,  337,  685,  335,  336,  338,
      110,  684,  683,  682,  108,  110,  108,  108,  108,  681,
      108,  108,  680,  108,  110,  108,  108,  108,  679,  108,
      108,  108,  678,  108,  108,  339,  108,  340,  108,  108,
      677,  110,  676,  675,  674,  110,  341,  673,  672,  671,
      110,  342,  343,  344,  110,  670,  669,  108,  110,  108,

      108,  668,  345,  110,  667,  347,  348,  346,  666,  166,
      166,  166,  166,  166,  166,  166,  166,  166,  166,  665,
      664,  832,  663,  832,  110,  108,  349,  108,  108,  108,
      662,  108,  108,  350,  104,  351,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  465,  472,  108,  465,
      108,  108,  110,  661,  660,  108,  110,  108,  108,  659,
      658,  657,  465,  108,  656,  108,  108,  465,  108,  655,
      108,  108,  643,  642,  108,  110,  108,  108,  108,  641,
      108,  108,  110,  108,  640,  108,  108,  639,  473,  108,
      110,  108,  108,  638,  108,  110,  108,  108,  637,  636,

      108,  110,  108,  108,  108,  110,  108,  108,  635,  108,
      110,  108,  108,  634,  633,  632,  110,  108,  631,  108,
      108,  110,  108,  474,  108,  108,  108,  110,  108,  108,
      630,  110,  108,  629,  108,  108,  110,  628,  627,  626,
      476,  477,  475,  108,  110,  108,  108,  622,  108,  110,
      108,  108,  108,  110,  108,  108,  621,  480,  620,  110,
      478,  108,  619,  108,  108,  618,  108,  617,  108,  108,
      110,  479,  616,  615,  108,  110,  108,  108,  614,  110,
      483,  108,  613,  108,  108,  612,  611,  108,  110,  108,
      108,  608,  481,  110,  108,  607,  108,  108,  606,  605,

      108,  110,  108,  108,  108,  482,  108,  108,  110,  602,
      601,  484,  600,  485,  110,  108,  599,  108,  108,  487,
      108,  110,  108,  108,  598,  571,  108,  110,  108,  108,
      486,  110,  108,  568,  108,  108,  108,  567,  108,  108,
      566,  108,  110,  108,  108,  565,  108,  110,  108,  108,
      564,  563,  108,  110,  108,  108,  562,  561,  560,  110,
      559,  558,  108,  110,  108,  108,  557,  108,  110,  108,
      108,  556,  108,  110,  108,  108,  489,  555,  108,  110,
      108,  108,  554,  553,  108,  490,  108,  108,  488,  110,
      108,  552,  108,  108,  110,  108,  551,  108,  108,  110,

      550,  108,  491,  108,  108,  110,  108,  549,  108,  108,
      108,  110,  108,  108,  548,  547,  108,  110,  108,  108,
      546,  545,  110,  108,  544,  108,  108,  108,  110,  108,
      108,  492,  543,  110,  497,  498,  499,  110,  542,  108,
      493,  108,  108,  110,  541,  540,  494,  539,  495,  538,
      110,  537,  534,  108,  110,  108,  108,  108,  533,  108,
      108,  108,  532,  108,  108,  108,  110,  108,  108,  108,
      531,  108,  108,  530,  529,  528,  496,  501,  527,  108,
      110,  108,  108,  108,  110,  108,  108,  526,  110,  500,
      502,  108,  110,  108,  108,  108,  110,  108,  108,  108,

      507,  108,  108,  525,  524,  523,  110,  522,  521,  503,
      110,  520,  519,  518,  517,  516,  515,  108,  110,  108,
      108,  832,  110,  832,  514,  513,  110,  504,  506,  512,
      511,  505,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  510,  460,  110,  508,  168,  509,  108,  168,
      108,  108,  108,  275,  108,  108,  108,  459,  108,  108,
      458,  108,  168,  108,  108,  457,  108,  168,  108,  108,
      108,  456,  108,  108,  108,  110,  108,  108,  108,  110,
      108,  108,  108,  110,  108,  108,  455,  108,  110,  108,
      108,  454,  108,  110,  108,  108,  108,  110,  108,  108,

      453,  110,  452,  576,  108,  110,  108,  108,  451,  110,
      450,  449,  448,  580,  110,  108,  447,  108,  108,  110,
      438,  435,  108,  110,  108,  108,  108,  577,  108,  108,
      434,  110,  433,  432,  108,  579,  108,  108,  108,  578,
      108,  108,  110,  583,  108,  431,  108,  108,  108,  110,
      108,  108,  108,  110,  108,  108,  108,  581,  108,  108,
      430,  110,  429,  582,  108,  110,  108,  108,  424,  421,
      108,  110,  108,  108,  420,  110,  419,  416,  584,  110,
      415,  414,  108,  110,  108,  108,  108,  413,  108,  108,
      585,  110,  412,  108,  411,  108,  108,  110,  410,  587,

      588,  589,  590,  591,  592,  108,  407,  108,  108,  110,
      593,  406,  405,  110,  586,  594,  108,  404,  108,  108,
      110,  108,  403,  108,  108,  108,  400,  108,  108,  397,
      396,  108,  110,  108,  108,  108,  395,  108,  108,  108,
      394,  108,  108,  110,  108,  391,  108,  108,  110,  390,
      387,  108,  110,  108,  108,  384,  383,  108,  110,  108,
      108,  382,  110,  381,  380,  377,  110,  376,  375,  374,
      832,  110,  832,  373,  372,  371,  595,  108,  110,  108,
      108,  370,  369,  364,  110,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  647,  363,  596,  647,  108,

      597,  108,  108,  108,  110,  108,  108,  108,  362,  108,
      108,  647,  108,  361,  108,  108,  647,  108,  358,  108,
      108,  108,  357,  108,  108,  108,  110,  108,  108,  108,
      110,  108,  108,  108,  110,  108,  108,  356,  355,  110,
      650,  354,  353,  108,  110,  108,  108,  108,  110,  108,
      108,  108,  110,  108,  108,  352,  110,  649,  283,  648,
      110,  108,  832,  108,  108,  108,  278,  108,  108,  108,
      110,  108,  108,  108,  110,  108,  108,  108,  110,  108,
      108,  108,  277,  108,  108,  651,  275,  273,  110,  652,
      272,  108,  110,  108,  108,  108,  110,  108,  108,  653,

      110,  233,  171,  108,  110,  108,  108,  170,  110,  165,
      162,  159,  832,   53,   51,   53,   51,  832,  110,  832,
      832,  108,  110,  108,  108,  108,  832,  108,  108,  832,
      110,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  108,  691,  108,  108,  691,  832,  108,  110,  108,
      108,  832,  110,  108,  654,  108,  108,  108,  691,  108,
      108,  832,  694,  691,  108,  832,  108,  108,  110,  108,
      832,  108,  108,  832,  110,  692,  108,  693,  108,  108,
      110,  832,  832,  108,  110,  108,  108,  108,  832,  108,
      108,  110,  832,  832,  832,  108,  110,  108,  108,  108,

      832,  108,  108,  110,  832,  832,  108,  696,  108,  108,
      110,  832,  832,  832,  110,  108,  697,  108,  108,  695,
      832,  108,  110,  108,  108,  108,  110,  108,  108,  721,
      723,  832,  108,  110,  108,  108,  832,  108,  722,  108,
      108,  108,  110,  108,  108,  832,  725,  832,  110,  832,
      724,  108,  110,  108,  108,  108,  832,  108,  108,  110,
      832,  832,  832,  108,  110,  108,  108,  108,  110,  108,
      108,  832,  832,  108,  832,  108,  108,  108,  110,  108,
      108,  108,  110,  108,  108,  832,  832,  742,  744,  832,
      110,  832,  743,  108,  110,  108,  108,  832,  760,  745,

      110,  832,  832,  832,  110,  832,  832,  832,  110,  832,
      776,  761,  832,  832,  108,  762,  108,  108,  777,  832,
      110,  108,  832,  108,  108,  108,  832,  108,  108,  778,
      792,  832,  832,  793,  803,  108,  832,  108,  108,  832,
      108,  110,  108,  108,  832,  832,  794,  108,  110,  108,
      108,  832,  110,  108,  811,  108,  108,  108,  832,  108,
      108,  108,  110,  108,  108,  832,  832,  110,  108,  832,
      108,  108,  832,  108,  110,  108,  108,  832,  832,  832,
      110,  805,  832,  804,  110,  832,  832,  108,  110,  108,
      108,  108,  812,  108,  108,  110,  832,  832,  832,  813,

      110,  108,  832,  108,  108,  108,  832,  108,  108,  832,
      832,  832,  818,  832,  110,  832,  832,  817,  110,  822,
      832,  832,  832,  832,  832,  832,  832,  832,  110,  832,
      832,  832,  110,  832,  832,  832,  832,  832,  832,  826,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  830,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  831,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   62,  832,  832,  832,   62,   62,   62,   62,
       62,   62,  103,  103,  832,  103,  832,  832,  103,  107,

      107,  107,  832,  832,  832,  107,  107,  107,  107,  107,
      109,  832,  832,  109,  832,  832,  832,  109,  109,  109,
      109,  109,  109,   64,  832,   64,   64,   64,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  276,  276,  832,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,   97,   97,  832,   97,
      280,  280,  280,  280,  284,  284,  284,  284,  284,  286,
      286,  832,  832,  832,  286,  286,  286,  286,  286,  287,
      832,  832,  832,  287,  287,  287,  287,  287,  287,  288,
      832,  832,  832,  288,  288,  288,  288,  288,  288,  461,

      461,  832,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  464,  464,  464,  464,  466,  466,  466,
      466,  470,  832,  832,  832,  470,  470,  470,  470,  470,
      470,  471,  832,  832,  832,  471,  471,  471,  471,  471,
      471,  572,  572,  572,  572,  644,  644,  644,  644,  690,
      690,  690,  690,  720,  720,  720,  720,  741,  741,  741,
      741,  759,  759,  759,  759,  775,  775,  775,  775,  791,
      791,  791,  791,  802,  802,  802,  802,  810,  810,  810,
      810,  816,  816,  816,  816,  821,  821,  821,  821,  825,
      825,  825,  825,  829,  829,  829,  829,    3,  832,  832,

      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832
    } ;

static yyconst flex_int16_t yy_chk[2376] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    6,    6,    9,
       10,   10,   10,   52,   52,   10,  824,   10,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   18,   54,   60,

      190,   25,   18,  730,   25,   25,   60,  190,   26,   20,
       26,   26,   27,  730,   27,   27,   58,   27,   58,    9,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       20,   18,   68,   68,   79,   26,   20,   76,   54,   27,
       72,   76,   79,   17,   25,  100,   20,  100,  200,   72,
       76,   17,   17,   17,   17,   17,   17,   17,   17,   17,
      200,   17,   17,   17,   17,   17,  111,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   19,  205,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   31,  823,
       31,   31,  167,  205,  167,   19,   19,   19,   19,   32,

       77,   32,   32,   19,   19,   34,  111,   34,   34,   77,
       19,  202,   19,   19,   19,   31,   33,  202,   33,   33,
      250,  178,   35,  178,   35,   35,   32,  210,  250,  210,
       97,   19,   34,   37,  820,   37,   37,   31,   36,   31,
       36,   36,   38,   33,   38,   38,   85,   32,   31,   35,
       85,   97,   32,   39,   31,   39,   39,  819,  179,   85,
       37,   34,   85,   32,   33,   36,  815,   97,   41,   38,
       41,   41,  105,  105,   33,  814,   33,   33,  179,   40,
       39,   40,   40,   42,   33,   42,   42,  212,   46,  212,
       46,   46,   35,   38,  252,   41,   38,   36,   37,  252,

       43,   39,   43,   43,  220,   39,   40,  220,  251,   39,
       42,   75,  105,  809,   39,   46,  231,   75,  231,   45,
       39,   45,   45,  251,  807,   75,   47,   43,   47,   47,
      236,   40,   41,   62,  236,   62,   62,  468,   82,  468,
       40,  238,   42,   87,   42,   87,   45,   42,  238,   46,
       43,   82,   43,   47,   82,  525,   82,   64,   64,  525,
       62,   64,   73,  248,  239,   43,   44,  239,   44,   44,
      248,   45,   73,   64,   64,   73,   87,   45,  801,   64,
       87,  798,   73,   45,  253,   87,  103,   47,  108,   45,
      108,  108,  253,   44,   63,   63,   63,   63,   63,   63,

       63,   63,   63,   63,  518,   69,   69,  103,  109,  518,
      109,  109,  797,  103,   44,  108,  796,  278,   44,   63,
      398,   44,   44,  103,   44,   44,   65,   65,  790,   44,
       65,  789,   44,   44,  398,  109,  788,   69,   69,  786,
      785,   65,   65,   65,  457,   69,  278,   69,   65,   69,
       70,   69,   70,   70,   71,   70,   71,   70,  457,  783,
       71,   71,  782,   74,   71,   74,   74,   71,   74,   78,
      466,   71,   71,   71,   71,   80,  544,   80,   78,   80,
       70,   98,   78,   78,   78,   70,   98,   83,   80,   83,
      544,  466,  544,   84,   80,   84,   83,   83,   84,   83,

       84,   74,  112,   70,  112,  112,  772,  284,   86,   83,
       86,   74,   74,   86,   88,   86,  115,   88,  115,  115,
       98,   88,   98,   84,  573,  771,  573,   84,  467,  112,
       84,   88,  770,  284,  284,  763,  763,  763,  113,  769,
      113,  113,   84,  115,  768,  114,   84,  114,  114,  467,
       86,  767,   86,   96,  284,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,  113,  116,  112,  116,  116,
      766,  765,  114,  117,   96,  117,  117,  115,  764,  118,
       96,  118,  118,  119,  757,  119,  119,  756,  755,  113,
       96,  754,  120,  116,  120,  120,  114,  753,  752,  121,

      117,  121,  121,  751,  279,  122,  118,  122,  122,  279,
      119,  123,  279,  123,  123,  124,  750,  124,  124,  120,
      125,  749,  125,  125,  748,  117,  121,  118,  747,  117,
      116,  118,  122,  843,  746,  843,  118,  739,  123,  125,
      737,  119,  124,  279,  736,  279,  126,  125,  126,  126,
      848,  127,  848,  127,  127,  128,  735,  128,  128,  130,
      121,  130,  130,  855,  120,  855,  129,  122,  129,  129,
      122,  734,  131,  126,  131,  131,  125,  123,  127,  857,
      733,  857,  128,  124,  731,  129,  130,  132,  729,  132,
      132,  728,  727,  129,  126,  726,  719,  715,  133,  131,

      133,  133,  714,  134,  712,  134,  134,  711,  710,  135,
      130,  135,  135,  709,  132,  136,  127,  136,  136,  706,
      705,  130,  128,  704,  137,  133,  137,  137,  703,  130,
      134,  131,  138,  702,  138,  138,  135,  139,  701,  139,
      139,  140,  136,  140,  140,  700,  141,  132,  141,  141,
      142,  137,  142,  142,  699,  143,  689,  143,  143,  138,
      688,  134,  687,  135,  139,  684,  133,  683,  140,  144,
      682,  144,  144,  141,  680,  679,  145,  142,  145,  145,
      676,  136,  143,  146,  138,  146,  146,  675,  147,  674,
      147,  147,  673,  140,  672,  148,  144,  148,  148,  139,

      140,  142,  149,  145,  149,  149,  671,  670,  141,  142,
      146,  150,  666,  150,  150,  147,  142,  664,  143,  663,
      144,  662,  148,  151,  658,  151,  151,  657,  152,  149,
      152,  152,  656,  642,  145,  641,  146,  153,  150,  153,
      153,  146,  145,  640,  639,  148,  638,  146,  147,  149,
      151,  637,  636,  635,  154,  152,  154,  154,  155,  634,
      155,  155,  633,  156,  153,  156,  156,  157,  632,  157,
      157,  158,  631,  158,  158,  150,  289,  152,  289,  289,
      629,  154,  628,  627,  626,  155,  152,  625,  624,  623,
      156,  152,  152,  152,  157,  621,  620,  290,  158,  290,

      290,  619,  153,  289,  618,  154,  155,  153,  617,  166,
      166,  166,  166,  166,  166,  166,  166,  166,  166,  616,
      611,  282,  610,  282,  290,  291,  156,  291,  291,  292,
      609,  292,  292,  157,  166,  158,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  282,  290,  293,  282,
      293,  293,  291,  608,  607,  294,  292,  294,  294,  606,
      604,  603,  282,  295,  601,  295,  295,  282,  296,  598,
      296,  296,  570,  567,  297,  293,  297,  297,  298,  566,
      298,  298,  294,  299,  565,  299,  299,  563,  292,  300,
      295,  300,  300,  562,  301,  296,  301,  301,  559,  558,

      302,  297,  302,  302,  303,  298,  303,  303,  557,  304,
      299,  304,  304,  556,  555,  554,  300,  305,  551,  305,
      305,  301,  306,  295,  306,  306,  307,  302,  307,  307,
      549,  303,  308,  548,  308,  308,  304,  547,  546,  545,
      298,  299,  297,  309,  305,  309,  309,  543,  310,  306,
      310,  310,  311,  307,  311,  311,  542,  304,  541,  308,
      301,  312,  540,  312,  312,  537,  313,  536,  313,  313,
      309,  302,  534,  532,  314,  310,  314,  314,  530,  311,
      312,  315,  528,  315,  315,  527,  526,  316,  312,  316,
      316,  522,  307,  313,  317,  521,  317,  317,  520,  519,

      318,  314,  318,  318,  319,  309,  319,  319,  315,  517,
      515,  312,  514,  313,  316,  320,  512,  320,  320,  318,
      321,  317,  321,  321,  510,  459,  322,  318,  322,  322,
      315,  319,  323,  456,  323,  323,  324,  455,  324,  324,
      454,  325,  320,  325,  325,  453,  326,  321,  326,  326,
      448,  447,  327,  322,  327,  327,  446,  445,  443,  323,
      442,  441,  328,  324,  328,  328,  440,  329,  325,  329,
      329,  439,  330,  326,  330,  330,  322,  438,  331,  327,
      331,  331,  436,  425,  332,  323,  332,  332,  321,  328,
      333,  423,  333,  333,  329,  334,  422,  334,  334,  330,

      421,  335,  324,  335,  335,  331,  336,  420,  336,  336,
      337,  332,  337,  337,  419,  418,  338,  333,  338,  338,
      417,  414,  334,  339,  413,  339,  339,  340,  335,  340,
      340,  329,  411,  336,  338,  338,  338,  337,  409,  341,
      331,  341,  341,  338,  406,  404,  332,  402,  333,  401,
      339,  399,  393,  342,  340,  342,  342,  343,  392,  343,
      343,  344,  390,  344,  344,  345,  341,  345,  345,  346,
      387,  346,  346,  386,  384,  382,  337,  340,  381,  347,
      342,  347,  347,  348,  343,  348,  348,  380,  344,  339,
      341,  349,  345,  349,  349,  350,  346,  350,  350,  351,

      347,  351,  351,  378,  377,  376,  347,  375,  370,  343,
      348,  369,  365,  364,  363,  358,  357,  472,  349,  472,
      472,  360,  350,  360,  356,  355,  351,  344,  346,  354,
      353,  345,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  352,  275,  472,  348,  360,  350,  473,  360,
      473,  473,  474,  274,  474,  474,  475,  273,  475,  475,
      272,  476,  360,  476,  476,  270,  477,  360,  477,  477,
      478,  269,  478,  478,  479,  473,  479,  479,  480,  474,
      480,  480,  481,  475,  481,  481,  267,  482,  476,  482,
      482,  266,  483,  477,  483,  483,  484,  478,  484,  484,

      265,  479,  261,  474,  485,  480,  485,  485,  259,  481,
      258,  257,  256,  483,  482,  486,  254,  486,  486,  483,
      249,  246,  487,  484,  487,  487,  488,  476,  488,  488,
      245,  485,  244,  243,  489,  482,  489,  489,  490,  479,
      490,  490,  486,  487,  491,  242,  491,  491,  492,  487,
      492,  492,  493,  488,  493,  493,  494,  485,  494,  494,
      241,  489,  240,  486,  495,  490,  495,  495,  237,  235,
      496,  491,  496,  496,  234,  492,  232,  230,  488,  493,
      228,  227,  497,  494,  497,  497,  498,  226,  498,  498,
      490,  495,  224,  499,  222,  499,  499,  496,  221,  497,

      497,  497,  497,  498,  498,  500,  219,  500,  500,  497,
      499,  216,  215,  498,  492,  499,  501,  214,  501,  501,
      499,  502,  213,  502,  502,  503,  211,  503,  503,  209,
      208,  504,  500,  504,  504,  505,  207,  505,  505,  506,
      206,  506,  506,  501,  507,  204,  507,  507,  502,  203,
      201,  508,  503,  508,  508,  198,  197,  509,  504,  509,
      509,  195,  505,  194,  193,  189,  506,  188,  187,  185,
      575,  507,  575,  184,  183,  182,  503,  576,  508,  576,
      576,  181,  180,  177,  509,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  575,  176,  505,  575,  577,

      506,  577,  577,  578,  576,  578,  578,  579,  175,  579,
      579,  575,  580,  174,  580,  580,  575,  581,  165,  581,
      581,  582,  164,  582,  582,  583,  577,  583,  583,  584,
      578,  584,  584,  585,  579,  585,  585,  163,  162,  580,
      581,  161,  160,  586,  581,  586,  586,  587,  582,  587,
      587,  588,  583,  588,  588,  159,  584,  579,  102,  578,
      585,  589,   95,  589,  589,  590,   94,  590,  590,  591,
      586,  591,  591,  592,  587,  592,  592,  593,  588,  593,
      593,  594,   93,  594,  594,  582,   92,   91,  589,  584,
       89,  595,  590,  595,  595,  596,  591,  596,  596,  585,

      592,   81,   67,  597,  593,  597,  597,   66,  594,   61,
       59,   57,   56,   53,   51,    7,    5,  646,  595,  646,
        3,  648,  596,  648,  648,  649,    0,  649,  649,    0,
      597,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  650,  646,  650,  650,  646,    0,  651,  648,  651,
      651,    0,  649,  652,  597,  652,  652,  653,  646,  653,
      653,    0,  650,  646,  654,    0,  654,  654,  650,  692,
        0,  692,  692,    0,  651,  648,  693,  649,  693,  693,
      652,    0,    0,  694,  653,  694,  694,  695,    0,  695,
      695,  654,    0,    0,    0,  696,  692,  696,  696,  697,

        0,  697,  697,  693,    0,    0,  721,  653,  721,  721,
      694,    0,    0,    0,  695,  722,  654,  722,  722,  652,
        0,  723,  696,  723,  723,  724,  697,  724,  724,  692,
      694,    0,  725,  721,  725,  725,    0,  742,  693,  742,
      742,  743,  722,  743,  743,    0,  697,    0,  723,    0,
      696,  744,  724,  744,  744,  745,    0,  745,  745,  725,
        0,    0,    0,  760,  742,  760,  760,  761,  743,  761,
      761,    0,    0,  762,    0,  762,  762,  776,  744,  776,
      776,  777,  745,  777,  777,    0,    0,  723,  725,    0,
      760,    0,  724,  778,  761,  778,  778,    0,  742,  725,

      762,    0,    0,    0,  776,    0,    0,    0,  777,    0,
      760,  744,    0,    0,  792,  745,  792,  792,  761,    0,
      778,  793,    0,  793,  793,  794,    0,  794,  794,  762,
      776,    0,    0,  777,  792,  803,    0,  803,  803,    0,
      804,  792,  804,  804,    0,    0,  778,  805,  793,  805,
      805,    0,  794,  811,  803,  811,  811,  812,    0,  812,
      812,  813,  803,  813,  813,    0,    0,  804,  817,    0,
      817,  817,    0,  818,  805,  818,  818,    0,    0,    0,
      811,  794,    0,  793,  812,    0,    0,  822,  813,  822,
      822,  826,  804,  826,  826,  817,    0,    0,    0,  805,

      818,  830,    0,  830,  830,  831,    0,  831,  831,    0,
        0,    0,  813,    0,  822,    0,    0,  812,  826,  817,
        0,    0,    0,    0,    0,    0,    0,    0,  830,    0,
        0,    0,  831,    0,    0,    0,    0,    0,    0,  822,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  826,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  830,  833,  833,
      833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
      833,  833,  834,    0,    0,    0,  834,  834,  834,  834,
      834,  834,  835,  835,    0,  835,    0,    0,  835,  836,

      836,  836,    0,    0,    0,  836,  836,  836,  836,  836,
      837,    0,    0,  837,    0,    0,    0,  837,  837,  837,
      837,  837,  837,  838,    0,  838,  838,  838,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  840,  840,    0,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  841,  841,    0,  841,
      842,  842,  842,  842,  844,  844,  844,  844,  844,  845,
      845,    0,    0,    0,  845,  845,  845,  845,  845,  846,
        0,    0,    0,  846,  846,  846,  846,  846,  846,  847,
        0,    0,    0,  847,  847,  847,  847,  847,  847,  849,

      849,    0,  849,  849,  849,  849,  849,  849,  849,  849,
      849,  849,  849,  850,  850,  850,  850,  851,  851,  851,
      851,  852,    0,    0,    0,  852,  852,  852,  852,  852,
      852,  853,    0,    0,    0,  853,  853,  853,  853,  853,
      853,  854,  854,  854,  854,  856,  856,  856,  856,  858,
      858,  858,  858,  859,  859,  859,  859,  860,  860,  860,
      860,  861,  861,  861,  861,  862,  862,  862,  862,  863,
      863,  863,  863,  864,  864,  864,  864,  865,  865,  865,
      865,  866,  866,  866,  866,  867,  867,  867,  867,  868,
      868,  868,  868,  869,  869,  869,  869,  832,  832,  832,

      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[292] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "ocelot/parser/implementation/ptx.ll"
/*! \file ptx.lpp
	\date Wednesday January 14, 2009
	\author Gregory Diamos
	\brief The flex lexical description of the PTX language
*/
/******************************************************************************/
/* DEFINITIONS                                                                */
#line 17 "ocelot/parser/implementation/ptx.ll"
	
	#ifndef PTX_LPP_INCLUDED
	#define PTX_LPP_INCLUDED

	// Ocelot Includes
	#include <ocelot/parser/interface/PTXLexer.h>

	// Hydrazine Includes
	#include <hydrazine/interface/macros.h>
	#include <hydrazine/interface/string.h>

	// Standard Library Includes
	#include <cassert>
	#include <sstream>
	#include <cstring>
		
	void sstrcpy( char* destination, const char* source, unsigned int max );
	
	// Convert binary string to uint
	long long unsigned int binaryToUint( const std::string& );
	
/******************************************************************************/
#line 1298 "<stdout>"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 86 "ocelot/parser/implementation/ptx.ll"

                                    
#line 1433 "<stdout>"

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 833 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2298 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 88 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = PREPROCESSOR_INCLUDE; \
                                    return PREPROCESSOR_INCLUDE; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 90 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = PREPROCESSOR_DEFINE; \
                                    return PREPROCESSOR_DEFINE; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 92 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = PREPROCESSOR_IF; \
                                    return PREPROCESSOR_IF; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 94 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = PREPROCESSOR_IFDEF; \
                                    return PREPROCESSOR_IFDEF; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 96 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = PREPROCESSOR_ELSE; \
                                    return PREPROCESSOR_ELSE; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 98 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = PREPROCESSOR_ENDIF; \
                                    return PREPROCESSOR_ENDIF; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 100 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = PREPROCESSOR_LINE; \
                                    return PREPROCESSOR_LINE; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 102 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = PREPROCESSOR_FILE; \
                                    return PREPROCESSOR_FILE; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 105 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_ADD; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 107 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_ADDC; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 109 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_AND; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 111 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_ATOM; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 113 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_ABS; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 115 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_BAR; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 117 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_BFI; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 119 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_BFE; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 121 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_BFIND; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 123 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_BRA; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 125 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_BREV; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 127 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_BRKPT; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 129 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_CALL; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 131 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_CLZ; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 133 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_CNOT; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 135 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_COPYSIGN; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 137 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_COS; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 139 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_CVT; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 141 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_CVTA; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 143 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_DIV; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 145 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_EX2; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 147 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_EXIT; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 149 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_FMA; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 151 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_ISSPACEP; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 153 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_LD; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 155 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_LDU; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 157 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_LG2; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 159 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_MEMBAR; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 161 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_MIN; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 163 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_MAD; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 165 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_MADC; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 167 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_MAD24; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 169 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_MAX; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 171 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_MOV; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 173 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_MUL; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 175 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_MUL24; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 177 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_NEG; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 179 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_NOT; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 181 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_OR; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 183 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_PMEVENT; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 185 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                  return OPCODE_PREFETCH; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 187 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                  return OPCODE_PREFETCHU; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 189 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_POPC; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 191 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_PRMT; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 193 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_RCP; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 195 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_RED; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 197 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_REM; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 199 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_RET; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 201 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_RSQRT; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 203 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_SAD; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 205 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_SELP; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 207 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_SET; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 209 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_SETP; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 211 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_SHFL; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 213 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_SHL; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 215 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_SHR; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 217 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_SIN; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 219 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_SLCT; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 221 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_SQRT; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 223 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_ST; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 225 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_SUB; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 227 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_SUBC; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 229 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_SULD; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 231 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_SUST; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 233 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_SURED; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 235 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_SUQ; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 237 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_TESTP; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 239 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_TEX; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 241 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_TLD4; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 243 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_TRAP; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 245 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_TXQ; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 247 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_VOTE; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 249 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_XOR; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 253 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_ALIGN; \
                                    return TOKEN_ALIGN; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 255 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_ADDRESS_SIZE; \
                                    return TOKEN_ADDRESS_SIZE; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 257 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_CALL_PROTOTYPE; \
                                    return TOKEN_CALL_PROTOTYPE; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 259 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_CALL_TARGETS; \
                                    return TOKEN_CALL_TARGETS; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 261 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_CONST; \
                                    return TOKEN_CONST; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 263 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_ENTRY; \
                                    return TOKEN_ENTRY; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 265 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_EXTERN; \
                                    return TOKEN_EXTERN; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 267 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_FILE; \
                                    return TOKEN_FILE; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 269 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_FUNCTION; \
                                    return TOKEN_FUNCTION; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 271 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_GLOBAL; \
                                    return TOKEN_GLOBAL; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 273 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_LOCAL; \
                                    return TOKEN_LOCAL; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 275 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_LOC; \
                                    return TOKEN_LOC; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 277 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_MAXNCTAPERSM; 
                                    return TOKEN_MAXNCTAPERSM; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 279 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_MINNCTAPERSM; 
                                    return TOKEN_MINNCTAPERSM; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 281 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_MAXNREG; 
                                    return TOKEN_MAXNREG; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 283 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_MAXNTID; 
                                    return TOKEN_MAXNTID; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 285 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_PARAM; \
                                    return TOKEN_PARAM; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 287 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_PRAGMA; \
                                    return TOKEN_PRAGMA; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 289 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_PTR; \
									return TOKEN_PTR; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 291 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_REG; \
                                    return TOKEN_REG; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 293 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_SAMPLERREF; \
                                    return TOKEN_SAMPLERREF; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 295 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_SECTION; \
                                    return TOKEN_SECTION; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 297 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_SHARED; \
                                    return TOKEN_SHARED;}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 299 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_SHIFT_AMOUNT; \
                                    return TOKEN_SHIFT_AMOUNT;}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 301 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_SURFREF; \
                                    return TOKEN_SURFREF; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 303 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_TARGET; \
                                    return TOKEN_TARGET; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 305 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_TEXREF; \
                                    return TOKEN_TEXREF; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 307 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_VERSION; \
                                    return TOKEN_VERSION; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 309 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_VISIBLE; \
                                    return TOKEN_VISIBLE; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 311 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_WEAK; \
                                    return TOKEN_WEAK; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 314 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_CTA; return TOKEN_CTA; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 315 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_GL; return TOKEN_GL; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 316 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_SYS; return TOKEN_SYS; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 318 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_SM10; 
                                    return TOKEN_SM10; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 320 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_SM11; 
                                    return TOKEN_SM11; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 322 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_SM12; 
                                    return TOKEN_SM12; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 324 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_SM13; 
                                    return TOKEN_SM13; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 326 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_SM20; 
                                    return TOKEN_SM20; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 328 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_SM21; 
                                    return TOKEN_SM21; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 330 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_SM30; 
                                    return TOKEN_SM30; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 332 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_SM35; 
                                    return TOKEN_SM35; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 334 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_MAP_F64_TO_F32; 
                                    return TOKEN_MAP_F64_TO_F32; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 336 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_TEXMODE_INDEPENDENT; 
                                    return TOKEN_TEXMODE_INDEPENDENT; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 338 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_TEXMODE_UNIFIED; 
                                    return TOKEN_TEXMODE_UNIFIED; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 341 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_U32; return TOKEN_U32; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 342 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_S32; return TOKEN_S32; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 343 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_S8; return TOKEN_S8; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 344 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_S16; return TOKEN_S16; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 345 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_S64; return TOKEN_S64; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 346 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_U8; return TOKEN_U8; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 347 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_U16; return TOKEN_U16; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 348 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_U64; return TOKEN_U64; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 349 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_B8; return TOKEN_B8; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 350 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_B16; return TOKEN_B16; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 351 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_B32; return TOKEN_B32; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 352 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_B64; return TOKEN_B64; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 353 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_F16; return TOKEN_F16; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 354 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_F64; return TOKEN_F64; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 355 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_F32; return TOKEN_F32; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 356 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_PRED; \
                                    return TOKEN_PRED; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 359 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_EQ; return TOKEN_EQ; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 360 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_NE; return TOKEN_NE; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 361 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_LT; return TOKEN_LT; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 362 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_LE; return TOKEN_LE; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 363 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_GT; return TOKEN_GT; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 364 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_GE; return TOKEN_GE; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 365 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_LS; return TOKEN_LS; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 366 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_HS; return TOKEN_HS; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 367 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_EQU; return TOKEN_EQU; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 368 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_NEU; return TOKEN_NEU; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 369 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_LTU; return TOKEN_LTU; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 370 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_LEU; return TOKEN_LEU; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 371 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_GTU; return TOKEN_GTU; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 372 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_GEU; return TOKEN_GEU; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 373 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_NUM; return TOKEN_NUM; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 374 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_NAN; return TOKEN_NAN; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 376 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_AND; return TOKEN_AND; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 377 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_OR; return TOKEN_OR; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 378 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_XOR; return TOKEN_XOR; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 380 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_HI; return TOKEN_HI; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 381 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_LO; return TOKEN_LO; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 382 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_RN; return TOKEN_RN; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 383 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_RM; return TOKEN_RM; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 384 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_RZ; return TOKEN_RZ; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 385 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_RP; return TOKEN_RP; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 386 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_RNI; return TOKEN_RNI; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 387 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_RMI; return TOKEN_RMI; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 388 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_RZI; return TOKEN_RZI; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 389 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_RPI; return TOKEN_RPI; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 390 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_SAT; return TOKEN_SAT; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 391 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_FTZ; return TOKEN_FTZ; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 392 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_APPROX; \
                                    return TOKEN_APPROX; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 395 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_TAIL; \
                                    return TOKEN_TAIL; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 397 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_UNI; return TOKEN_UNI; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 398 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_BYTE; \
                                    return TOKEN_BYTE; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 400 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_WIDE; \
                                    return TOKEN_WIDE; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 402 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_CARRY; \
                                    return TOKEN_CARRY; }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 404 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_VOLATILE; \
                                    return TOKEN_VOLATILE; }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 406 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_FULL; \
                                    return TOKEN_FULL; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 409 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_V2; return TOKEN_V2; }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 410 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_V4; return TOKEN_V4; }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 412 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_X; return TOKEN_X; }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 413 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_Y; return TOKEN_Y; }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 414 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_Z; return TOKEN_Z; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 415 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_W; return TOKEN_W; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 416 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_R; return TOKEN_R; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 417 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_G; return TOKEN_G; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 418 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_B; return TOKEN_B; }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 419 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_A; return TOKEN_A; }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 421 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_ANY; return TOKEN_ANY; }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 422 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_ALL; return TOKEN_ALL; }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 424 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_UP;   return TOKEN_UP;   }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 425 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_DOWN; return TOKEN_DOWN; }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 426 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_BFLY; return TOKEN_BFLY; }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 427 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_IDX;  return TOKEN_IDX;  }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 429 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_MIN; return TOKEN_MIN; }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 430 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_MAX; return TOKEN_MAX; }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 431 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_DEC; return TOKEN_DEC; }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 432 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_INC; return TOKEN_INC; }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 433 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_ADD; return TOKEN_ADD; }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 434 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_CAS; return TOKEN_CAS; }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 435 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_EXCH; return TOKEN_EXCH; }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 437 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_1D; return TOKEN_1D; }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 438 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_2D; return TOKEN_2D; }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 439 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_3D; return TOKEN_3D; }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 440 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_A1D; return TOKEN_A1D; }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 441 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_A2D; return TOKEN_A2D; }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 442 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_CUBE; return TOKEN_CUBE; }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 443 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_ACUBE; return TOKEN_ACUBE; }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 445 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_P; return TOKEN_P; }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 447 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_CA; return TOKEN_CA; }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 448 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_WB; return TOKEN_WB; }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 449 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_CG; return TOKEN_CG; }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 450 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_CS; return TOKEN_CS; }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 451 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_LU; return TOKEN_LU; }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 452 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_CV; return TOKEN_CV; }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 453 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_NC; return TOKEN_NC; }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 454 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_WT; return TOKEN_WT; }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 456 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_L1; return TOKEN_L1; }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 457 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_L2; return TOKEN_L2; }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 459 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_WIDTH; \
                                    return TOKEN_WIDTH; }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 461 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_HEIGHT; \
                                    return TOKEN_HEIGHT; }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 463 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_DEPTH; \
                                    return TOKEN_DEPTH; }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 465 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_NORMALIZED_COORDS; \
                                    return TOKEN_NORMALIZED_COORDS; }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 467 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_FILTER_MODE; \
                                    return TOKEN_FILTER_MODE; }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 469 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_ADDR_MODE_0; \
                                    return TOKEN_ADDR_MODE_0; }
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 471 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_ADDR_MODE_1; \
                                    return TOKEN_ADDR_MODE_1; }
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 473 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_ADDR_MODE_2; \
                                    return TOKEN_ADDR_MODE_2; }
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 475 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_CHANNEL_DATA_TYPE; \
                                    return TOKEN_CHANNEL_DATA_TYPE; }
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 477 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_CHANNEL_ORDER; \
                                    return TOKEN_CHANNEL_ORDER; }
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 479 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_TRAP; \
                                    return TOKEN_TRAP; }
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 481 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_TO; return TOKEN_TO; }
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 482 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_CLAMP; 
                                    return TOKEN_CLAMP; }
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 484 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_ZERO; \
                                    return TOKEN_ZERO; }
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 486 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_ARRIVE; \
                                    return TOKEN_ARRIVE; }
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 488 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_RED; \
                                    return TOKEN_RED; }
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 490 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_SYNC; \
                                    return TOKEN_SYNC; }
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 492 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_POPC; \
                                    return TOKEN_POPC; }
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 495 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_BALLOT; \
                                    return TOKEN_BALLOT; }
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 498 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_F4E; return TOKEN_F4E; }
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 499 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_B4E; return TOKEN_B4E; }
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 500 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_RC8; return TOKEN_RC8; }
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 501 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_ECL; return TOKEN_ECL; }
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 502 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_ECR; return TOKEN_ECR; }
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 503 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_RC16; \
                                    return TOKEN_RC16; }
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 506 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_FINITE; \
                                    return TOKEN_FINITE; }
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 508 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_INFINITE; \
                                    return TOKEN_INFINITE; }
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 510 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_NUMBER; \
                                    return TOKEN_NUMBER; }
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 512 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_NOT_A_NUMBER; \
                                    return TOKEN_NOT_A_NUMBER; }
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 514 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_NORMAL; \
                                    return TOKEN_NORMAL; }
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 516 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_SUBNORMAL; \
                                    return TOKEN_SUBNORMAL; }
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 519 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext + 1, 1024 ); \
                                    return TOKEN_PREDICATE_IDENTIFIER; }
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 521 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext + 2, 1024 ); \
                                    return TOKEN_INV_PREDICATE_IDENTIFIER; }
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 523 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return TOKEN_IDENTIFIER;}
	YY_BREAK
case 256:
/* rule 256 can match eol */
YY_RULE_SETUP
#line 525 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext + 1, \
                                    MIN( strlen( yytext ) - 1, 1024 ) ); \
                                    return TOKEN_STRING;}
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 529 "ocelot/parser/implementation/ptx.ll"
{ std::stringstream stream; stream << yytext; \
                                    stream >> yylval->value; \
                                    return TOKEN_DECIMAL_CONSTANT; }
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 532 "ocelot/parser/implementation/ptx.ll"
{ yylval->value = binaryToUint( yytext ); \
                                    return TOKEN_DECIMAL_CONSTANT; }
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 534 "ocelot/parser/implementation/ptx.ll"
{ std::stringstream stream; \
                                    stream << std::hex; stream << yytext; \
                                    stream >> yylval->value; \
                                    return TOKEN_DECIMAL_CONSTANT; }
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 538 "ocelot/parser/implementation/ptx.ll"
{ std::stringstream stream; \
                                    stream << std::oct; stream << yytext; \
                                    stream >> yylval->value; \
                                    return TOKEN_DECIMAL_CONSTANT; }
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 543 "ocelot/parser/implementation/ptx.ll"
{ std::stringstream stream; stream << yytext; \
                                    stream >> yylval->uvalue; \
                                    return TOKEN_DECIMAL_CONSTANT; }
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 546 "ocelot/parser/implementation/ptx.ll"
{ yylval->uvalue = binaryToUint( yytext ); \
                                    return TOKEN_DECIMAL_CONSTANT; }
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 548 "ocelot/parser/implementation/ptx.ll"
{ std::stringstream stream; \
                                    stream << std::hex; stream << yytext; \
                                    stream >> yylval->uvalue; \
                                    return TOKEN_DECIMAL_CONSTANT; }
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 552 "ocelot/parser/implementation/ptx.ll"
{ std::stringstream stream; \
                                    stream << std::oct; stream << yytext; \
                                    stream >> yylval->uvalue; \
                                    return TOKEN_DECIMAL_CONSTANT; }
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 557 "ocelot/parser/implementation/ptx.ll"
{ yytext[1] = 'x'; std::stringstream stream; \
                                    stream << std::hex << yytext; \
                                    stream >> yylval->uvalue; \
                                    return TOKEN_SINGLE_CONSTANT; }
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 561 "ocelot/parser/implementation/ptx.ll"
{ yytext[1] = 'x'; std::stringstream stream; \
                                    stream << std::hex << yytext; \
                                    stream >> yylval->uvalue; \
                                    return TOKEN_DOUBLE_CONSTANT; }                  
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 565 "ocelot/parser/implementation/ptx.ll"
{ std::stringstream stream; stream << yytext; \
                                    stream >> yylval->doubleFloat; \
                                    return TOKEN_DOUBLE_CONSTANT; }
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 569 "ocelot/parser/implementation/ptx.ll"
{ const char* position = strchr( yytext, ' ' );\
                                    if( position == 0 ) \
                                    { \
                                        sstrcpy( yylval->text, yytext, \
                                           MIN( strlen( yytext ), 1024 ) ); \
                                    } \
                                    else \
                                    { \
                                        sstrcpy( yylval->text, yytext, \
                                           MIN( position - yytext + 1, \
                                           1024 ) ); \
                                    } \
                                    \
                                    return TOKEN_LABEL; \
                                }
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 586 "ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 );
                                    return TOKEN_METADATA; }
	YY_BREAK
case 270:
/* rule 270 can match eol */
YY_RULE_SETUP
#line 588 "ocelot/parser/implementation/ptx.ll"
{ nextColumn += strlen( yytext ); }
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 589 "ocelot/parser/implementation/ptx.ll"
{ nextColumn += strlen( yytext ) * 4; }
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 590 "ocelot/parser/implementation/ptx.ll"
{ nextColumn += strlen( yytext ); }
	YY_BREAK
case 273:
/* rule 273 can match eol */
YY_RULE_SETUP
#line 591 "ocelot/parser/implementation/ptx.ll"
{ nextColumn  = 1; }
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 593 "ocelot/parser/implementation/ptx.ll"
{ yylval->text[0] = ','; 
                                    yylval->text[1] = '\0'; return (','); }
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 595 "ocelot/parser/implementation/ptx.ll"
{ yylval->text[0] = ';'; 
                                    yylval->text[1] = '\0'; return (';'); }
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 597 "ocelot/parser/implementation/ptx.ll"
{ yylval->text[0] = '.'; 
                                    yylval->text[1] = '\0'; return ('.'); }
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 599 "ocelot/parser/implementation/ptx.ll"
{ yylval->text[0] = '{'; 
                                    yylval->text[1] = '\0'; return ('{'); }
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 601 "ocelot/parser/implementation/ptx.ll"
{ yylval->text[0] = '}'; 
                                    yylval->text[1] = '\0'; return ('}'); }
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 603 "ocelot/parser/implementation/ptx.ll"
{ yylval->text[0] = '['; 
                                    yylval->text[1] = '\0'; return ('['); }
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 605 "ocelot/parser/implementation/ptx.ll"
{ yylval->text[0] = ']'; 
                                    yylval->text[1] = '\0'; return (']'); }
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 607 "ocelot/parser/implementation/ptx.ll"
{ yylval->text[0] = '('; 
                                    yylval->text[1] = '\0'; return ('('); }
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 609 "ocelot/parser/implementation/ptx.ll"
{ yylval->text[0] = ')'; 
                                    yylval->text[1] = '\0'; return (')'); }
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 611 "ocelot/parser/implementation/ptx.ll"
{ yylval->text[0] = '<'; 
                                    yylval->text[1] = '\0'; return ('<'); }
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 613 "ocelot/parser/implementation/ptx.ll"
{ yylval->text[0] = '+'; 
                                    yylval->text[1] = '\0'; return ('+'); }
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 615 "ocelot/parser/implementation/ptx.ll"
{ yylval->text[0] = '>'; 
                                    yylval->text[1] = '\0'; return ('>'); }
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 617 "ocelot/parser/implementation/ptx.ll"
{ yylval->text[0] = '='; 
                                    yylval->text[1] = '\0'; return ('='); }
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 619 "ocelot/parser/implementation/ptx.ll"
{ yylval->text[0] = '-'; 
                                    yylval->text[1] = '\0'; return ('-'); }
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 621 "ocelot/parser/implementation/ptx.ll"
{ yylval->text[0] = '!'; 
                                    yylval->text[1] = '\0'; return ('!'); }
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 623 "ocelot/parser/implementation/ptx.ll"
{ yylval->text[0] = '|'; 
                                    yylval->text[1] = '\0'; return ('|'); }
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 625 "ocelot/parser/implementation/ptx.ll"
{ yylval->text[0] = '_'; 
                                    yylval->text[1] = '\0'; return ('_'); }
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 628 "ocelot/parser/implementation/ptx.ll"
ECHO;
	YY_BREAK
#line 3176 "<stdout>"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	ptxfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	ptxfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					ptxrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) ptxrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 833 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 833 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 832);

		return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) ptxalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) ptxalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		ptxfree((void *) b->yy_ch_buf  );

	ptxfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)ptxalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)ptxrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) ptxalloc(new_size  );

		else
			(yy_start_stack) = (int *) ptxrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *ptxalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *ptxrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void ptxfree (void * ptr )
{
	free( (char *) ptr );	/* see ptxrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 627 "ocelot/parser/implementation/ptx.ll"



/******************************************************************************/
/* USER CODE                                                                  */

long long unsigned int binaryToUint( const std::string& string )
{
	return hydrazine::binaryToUint( string );
}

void sstrcpy( char* destination, const char* source, unsigned int max )
{
	return hydrazine::strlcpy( destination, source, max );
}

#endif

/******************************************************************************/


